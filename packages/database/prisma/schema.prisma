// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          Int                     @id @default(autoincrement())
  name        String
  description String?
  image       String?
  variants    Variant[]
  options     Option[]
  collections ProductsOnCollections[]
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
}

model Variant {
  id           Int                    @id @default(autoincrement())
  name         String
  sku          String                 @unique
  stock        Int
  price        Float
  productId    Int
  product      Product                @relation(fields: [productId], references: [id])
  optionValues OptionValueToVariant[]
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
}

model Option {
  id        Int           @id @default(autoincrement())
  name      String
  values    OptionValue[]
  productId Int
  product   Product       @relation(fields: [productId], references: [id])
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model OptionValue {
  id       Int    @id @default(autoincrement())
  value    String // e.g., "Red", "Large"
  optionId Int
  option   Option @relation(fields: [optionId], references: [id])

  OptionValueToVariant OptionValueToVariant[]
}

model OptionValueToVariant {
  variantId     Int
  optionValueId Int
  variant       Variant     @relation(fields: [variantId], references: [id])
  optionValue   OptionValue @relation(fields: [optionValueId], references: [id])

  @@id([variantId, optionValueId]) // Composite key to avoid duplicates
}

model Collection {
  id          Int                     @id @default(autoincrement())
  name        String
  description String?
  image       String?
  products    ProductsOnCollections[]
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
}

model ProductsOnCollections {
  productId    Int
  collectionId Int
  product      Product    @relation(fields: [productId], references: [id])
  collection   Collection @relation(fields: [collectionId], references: [id])

  @@id([productId, collectionId]) // Composite key to avoid duplicates
}
